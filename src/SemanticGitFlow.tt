<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tasks" #>
<#
    var taskFiles = new[] { "GetSemanticVersion.cs", "ParseSemanticTags.cs" };
#>
<!--
   Copyright 2014 Daniel Cazzulino

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
<#
    foreach (var taskFile in taskFiles)
    {
		var source = File.ReadAllText(this.Host.ResolvePath(taskFile));
		var usingExpr = @"\#region Using(?<using>[^\#]+)#endregion";
		var docExpr = @"\/\*(?<doc>.+)\*\/";
		var classNameExpr = @"class (?<name>[^\s]+) :";
		var inputExpr = @"\#region Input(?<input>[^\#]+)#endregion";
		var outputExpr = @"\#region Output(?<output>[^\#]+)#endregion";
		var codeExpr = @"\#region Code(?<code>[^\#]+)#endregion";

		var doc = Regex.Match(source, docExpr, RegexOptions.Singleline).Groups["doc"].Value;
		var name = Regex.Match(source, classNameExpr).Groups["name"].Value;

		var usings = Regex.Match(source, usingExpr, RegexOptions.Singleline)
			.Groups["using"].Value
			.Trim()
			.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
			.Select(line => line.Trim())
			.Select(line => line.Substring(6, line.Length - 7))
			.ToList();    
       
		var inputs = Regex.Match(source, inputExpr, RegexOptions.Singleline)
			.Groups["input"].Value
			.Trim()
			.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
			.Select(line => line.Trim())
			.Select(line => line.Substring(7))
			.Select(line => line.Substring(0, line.IndexOf('{')).Split(' '))
			.Select(line => new { Type = line[0], Name = line[1] })
			.ToList();
  
		var outputs = Regex.Match(source, outputExpr, RegexOptions.Singleline)
			.Groups["output"].Value
			.Trim()
			.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
			.Select(line => line.Trim())
			.Select(line => line.Substring(7))
			.Select(line => line.Substring(0, line.IndexOf('{')).Split(' '))
			.Select(line => new { Type = line[0], Name = line[1] })
			.ToList();
              
		var code = Regex.Match(source, codeExpr, RegexOptions.Singleline).Groups["code"].Value;        
#>


	<!--<#= doc #>-->

	<UsingTask
		TaskName="<#= name #>"
		TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll">

		<ParameterGroup>
<#
    foreach (var input in inputs)
    {
#>
			<<#= input.Name #><#= (input.Type != "string") ? (" ParameterType=\"" + input.Type + "\"") : ""  #> Required="true"/>
<#
	}
#>
<#
    foreach (var output in outputs)
    {
#>
			<<#= output.Name #> Output="true"/>
<#
	}
#>
		</ParameterGroup>

		<Task>
<#
    foreach (var @using in usings)
    {
#>
			<Using Namespace="<#= @using #>"/>
<#
	}
#>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
			<#= code #>
]]>
			</Code>
		</Task>

	</UsingTask>
<#
	}
#>

</Project>
