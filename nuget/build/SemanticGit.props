<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2014 Daniel Cazzulino

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	
	<!--
    ============================================================
              AssemblyInfo Generation Properties
	
	- GenerateAssemblyInfo
	Whether to generate the assembly info on build.
	Default: true
	
	Three format string properties are available to generate assembly 
	info attributes: AssemblyVersionFormat, AssemblyFileVersionFormat 
	and AssemblyInformationalVersionFormat. If specified, these will 
	be used to populate the corresponding assembly attribute. 
	
	The following replacement tokens can be used in these format 
	strings:
	- MAJOR: the major component of a semver git version tag.
	- MINOR: the minor component of a semver git version tag.
	- PATCH: the patch component of a semver git version tag.
	- PRE: optional pre-release component of a semver git version 
	  tag including the initial '-' separator. If not present,
	  it's replaced with an empty string.
	- COMMIT: the commit hash of the current HEAD.
	
	Examples:
	
	- Given:
		TAG: v0.1.0-pre
		AssemblyInformationalVersionFormat: MAJOR.MINOR.PATCH-PRE-COMMIT
	- Result for the build two commits after creating the tag: 
		[assembly:AssemblyInformationalVersion("0.1.2-pre-8d07975")]
	
	- Given:
		TAG: v0.1.0 (i.e. we removed the -pre for the current release branch)
		AssemblyInformationalVersionFormat: MAJOR.MINOR.PATCH-PRE-COMMIT
	- Result for the build two commits after creating the tag: 
		[assembly:AssemblyInformationalVersion("0.1.2-8d07975")]
		(NOTE: no '-pre' is present since it was not found in the tag)
	
	============================================================
	-->
	<PropertyGroup>
		<GenerateAssemblyInfo Condition="'$(GenerateAssemblyInfo)' == ''">true</GenerateAssemblyInfo>
		<PackageVersionFormat Condition="'$(PackageVersionFormat)' == ''">MAJOR.MINOR.PATCH</PackageVersionFormat>
		<AssemblyVersionFormat Condition="'$(AssemblyVersionFormat)' == ''">MAJOR.MINOR.0</AssemblyVersionFormat>
		<AssemblyFileVersionFormat Condition="'$(AssemblyFileVersionFormat)' == ''">MAJOR.MINOR.PATCH</AssemblyFileVersionFormat>
		<AssemblyInformationalVersionFormat Condition="'$(AssemblyInformationalVersionFormat)' == ''">MAJOR.MINOR.PATCH-PRE-COMMIT</AssemblyInformationalVersionFormat>
	</PropertyGroup>

	<!--
    ============================================================
              GitExe Property
	
	Cascading probing mechanism will try to locate an installed 
	version of git, msysgit or cygwin git.
	============================================================
	-->
	<PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
		<!-- We probe multiple places, with the first matching one winning -->
		<GitExe Condition="'$(GitExe)' == '' And Exists('C:\Program Files\Git\bin\git.exe')">C:\Program Files\Git\bin\git.exe</GitExe>
		<GitExe Condition="'$(GitExe)' == '' And Exists('C:\Program Files (x86)\Git\bin\git.exe')">C:\Program Files (x86)\Git\bin\git.exe</GitExe>
		<GitExe Condition="'$(GitExe)' == '' And Exists('C:\msysgit\bin\git.exe')">C:\msysgit\bin\git.exe</GitExe>
		<GitExe Condition="'$(GitExe)' == '' And Exists('C:\cygwin\bin\git.exe')">C:\cygwin\bin\git.exe</GitExe>
		<!-- Ultimately, just try the exe and hope it exists in the PATH already -->
		<GitExe Condition="'$(GitExe)' == ''">git.exe</GitExe>
	</PropertyGroup>
	<PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
		<GitExe>git</GitExe>
	</PropertyGroup>

</Project>
