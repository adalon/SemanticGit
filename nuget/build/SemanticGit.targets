<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2014 Daniel Cazzulino

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<Import Project="SemanticGit.props" Condition="'$(SemanticPropsImported)' != 'true'" />

	<!-- Publicly consumable target to format a string with the determined version values from Git SemVer labels
         Receives a VersionFormat property and returns a formatted value.
         The format can contain any of MAJOR, MINOR, PATCH, COMMIT or '-PRE' strings, which will be replaced with their 
         semver segments.
	 -->
	<Target Name="SemanticGit:FormatVersion" DependsOnTargets="SemanticGit:GetVersion" Returns="$(_FormattedVersion)">
		<PropertyGroup>
			<_FormattedVersion>$(VersionFormat.Replace('MAJOR', '$(_Major)').Replace('MINOR', '$(_Minor)').Replace('PATCH', '$(_Patch)').Replace('-PRE', '$(_PreRelease)').Replace('COMMIT', '$(_Commit)'))</_FormattedVersion>
		</PropertyGroup>
	</Target>

	<!-- Publicly consumable target to retrieve the current git commit SHA -->
	<Target Name="SemanticGit:GetCommit" DependsOnTargets="SemanticGit:GetGitRoot" Returns="$(_Sha)">
				
		<Run Exe="$(GitExe)" Args="log --pretty=format:%H -n 1" WorkingDir="$(MSBuildProjectDirectory)">
			<Output TaskParameter="Output" PropertyName="_Sha" />
		</Run>
		
	</Target>	
	
	<PropertyGroup Condition="'$(GenerateAssemblyInfo)' == 'true'">
		<CompileDependsOn>
			SemanticGit:GetHead;
			SemanticGit:GenerateAssemblyInfo;
			$(CompileDependsOn);
		</CompileDependsOn>

		<!-- Path to the generated assembly info. -->
		<AssemblyInfoFile Condition="'$(AssemblyInfoFile)' == ''">$(IntermediateOutputPath)AssemblyInfo.g$(DefaultLanguageSourceExtension)</AssemblyInfoFile>
		<!-- Used to generate the [Guid] attribute, which expects a GUID without the { }, as it's used in the ProjectGuid -->
		<ProjectGuidString>$([System.Guid]::Parse($(ProjectGuid)).ToString())</ProjectGuidString>
	</PropertyGroup>

	<Target Name="SemanticGit:GenerateAssemblyInfo" 
			DependsOnTargets="SemanticGit:EnsurePathExists;SemanticGit:GenerateAssemblyInfoCS;SemanticGit:GenerateAssemblyInfoVB"
			Condition="'$(GenerateAssemblyInfo)' == 'true'">

		<Error Condition="'$(Language)' != 'C#' AND '$(Language)' != 'VB'"
			   Text="Only C# and VB languages are supported for semantic assembly info generation from Git." />

		<ItemGroup>
			<Compile Include="$(AssemblyInfoFile)" />
		</ItemGroup>

		<Message Text="AssemblyInfo: 
	AssemblyVersion=$(AssemblyVersion)
	AssemblyFileVersion=$(AssemblyFileVersion)
	AssemblyInformationalVersion=$(AssemblyInformationalVersion)" Importance="normal" />
		
	</Target>

	<Target Name="SemanticGit:EnsurePathExists">
		<ItemGroup>
			<_AssemblyInfoFile Include="$(AssemblyInfoFile)" />
		</ItemGroup>

		<MakeDir Directories="%(_AssemblyInfoFile.RootDir)%(_AssemblyInfoFile.Directory)"
				 Condition="!Exists('%(_AssemblyInfoFile.RootDir)%(_AssemblyInfoFile.Directory)')" />
	</Target>

	<Target Name="SemanticGit:ApplyVersionFormats" DependsOnTargets="SemanticGit:GetVersion">
		<PropertyGroup>
			<PackageVersion>$(PackageVersionFormat.Replace('MAJOR', '$(_Major)').Replace('MINOR', '$(_Minor)').Replace('PATCH', '$(_Patch)').Replace('-PRE', '$(_PreRelease)').Replace('COMMIT', '$(_Commit)'))</PackageVersion>
			<AssemblyVersion>$(AssemblyVersionFormat.Replace('MAJOR', '$(_Major)').Replace('MINOR', '$(_Minor)').Replace('PATCH', '$(_Patch)'))</AssemblyVersion>
			<AssemblyFileVersion>$(AssemblyFileVersionFormat.Replace('MAJOR', '$(_Major)').Replace('MINOR', '$(_Minor)').Replace('PATCH', '$(_Patch)'))</AssemblyFileVersion>
			<AssemblyInformationalVersion>$(AssemblyInformationalVersionFormat.Replace('MAJOR', '$(_Major)').Replace('MINOR', '$(_Minor)').Replace('PATCH', '$(_Patch)').Replace('-PRE', '$(_PreRelease)').Replace('COMMIT', '$(_Commit)'))</AssemblyInformationalVersion>
		</PropertyGroup>
	</Target>

	<Target Name="SemanticGit:GenerateAssemblyInfoCS"
			Inputs="@(_HeadInput)"
			Outputs="$(AssemblyInfoFile)"
			DependsOnTargets="SemanticGit:ApplyVersionFormats"
			Condition="'$(Language)' == 'C#'">

		<WriteLinesToFile File='$(AssemblyInfoFile)'
						  Lines='
[assembly: System.Reflection.AssemblyVersion(ThisAssembly.Version)]
[assembly: System.Reflection.AssemblyFileVersion(ThisAssembly.FileVersion)]
[assembly: System.Reflection.AssemblyInformationalVersion(ThisAssembly.InformationalVersion)]

/// &lt;summary&gt;Provides access to the current assembly information.&lt;/summary&gt;
partial class ThisAssembly
{
	/// &lt;summary&gt;Assembly version: $(AssemblyVersion)&lt;/summary&gt;
	public const string Version = "$(AssemblyVersion)"%3b

	/// &lt;summary&gt;Assembly file version: $(AssemblyFileVersion)&lt;/summary&gt;
	public const string FileVersion = "$(AssemblyFileVersion)"%3b
	
	/// &lt;summary&gt;Assembly informational version: $(AssemblyInformationalVersion)&lt;/summary&gt;
	public const string InformationalVersion = "$(AssemblyInformationalVersion)"%3b
	
	/// &lt;summary&gt;Git commit of the assembly source: $(_Commit)&lt;/summary&gt;
	public const string Commit = "$(_Commit)"%3b
	
	/// &lt;summary&gt;Assembly unique identifier: $(ProjectGuidString)&lt;/summary&gt;
	public const string Guid = "$(ProjectGuidString)"%3b						  
}'
						  Overwrite='true' />

		<ItemGroup>
			<FileWrites Include="$(AssemblyInfoFile)" />
		</ItemGroup>

	</Target>

	<Target Name="SemanticGit:GenerateAssemblyInfoVB"
			Inputs="@(_HeadInput)"
			Outputs="$(AssemblyInfoFile)"
			DependsOnTargets="SemanticGit:ApplyVersionFormats"
			Condition="'$(Language)' == 'VB'">


		<WriteLinesToFile File='$(AssemblyInfoFile)'
						  Lines='
&lt;Assembly: System.Reflection.AssemblyVersion(ThisAssembly.Version)&gt;
&lt;Assembly: System.Reflection.AssemblyFileVersion(ThisAssembly.FileVersion)&gt;
&lt;Assembly: System.Reflection.AssemblyInformationalVersion(ThisAssembly.InformationalVersion)&gt;

Partial Class ThisAssembly
    Public Const Version = "$(AssemblyVersion)"
    Public Const FileVersion = "$(AssemblyFileVersion)"
    Public Const InformationalVersion = "$(AssemblyInformationalVersion)"
    Public Const Commit = "$(_Commit)"
    Public Const Guid = "$(ProjectGuidString)"
End Class
'
						  Overwrite='true' />

		<ItemGroup>
			<FileWrites Include="$(AssemblyInfoFile)" />
		</ItemGroup>

	</Target>

	<Target Name="SemanticGit:GetVersion" DependsOnTargets="SemanticGit:GetHead">
				
		<GetSemanticVersion Tag="$(_HeadTag)">
			<Output TaskParameter="Major" PropertyName="_Major" />
			<Output TaskParameter="Minor" PropertyName="_Minor" />
			<Output TaskParameter="Patch" PropertyName="_Patch" />
			<Output TaskParameter="Commits" PropertyName="_Commits" />
			<Output TaskParameter="PreRelease" PropertyName="_PreRelease" />
		</GetSemanticVersion>

		<Run Exe="$(GitExe)" Args="log --pretty=format:%h -n 1" WorkingDir="$(MSBuildProjectDirectory)">
			<Output TaskParameter="Output" PropertyName="_Commit" />
		</Run>

		<Message Text="Determined default semantic version as $(_Major).$(_Minor).$(_Patch)$(_PreRelease)-$(_Commit)"
				 Importance="normal" />
		
	</Target>
	
	<Target Name="SemanticGit:GetHead" DependsOnTargets="SemanticGit:GetGitRoot">

		<Error Condition="!Exists('$(GitRoot)\.git')" Text="Directory '$(GitRoot)' is not a git repository. Directory '.git' not found." />

		<Run Exe="$(GitExe)" Args="describe --tags" WorkingDir="$(MSBuildProjectDirectory)" ContinueOnError="true">
			<Output TaskParameter="Output" PropertyName="_HeadTag" />
		</Run>

		<Warning Text="Your current Git repository does not contain any tags. Defaulting to 'v0.1.0' for the current built. Please tag your repository to get consistent and reproducible build numbers."
				 Condition="'$(_HeadTag)' == ''" />

		<PropertyGroup Condition="'$(_HeadTag)' == ''">
			<_HeadTag>v0.1.0</_HeadTag>
		</PropertyGroup>

	</Target>

	<Target Name="SemanticGit:GetGitRoot">

		<Run Exe="$(GitExe)" Args="rev-parse --show-toplevel" WorkingDir="$(MSBuildProjectDirectory)">
			<Output TaskParameter="Output" PropertyName="_GitRoot" />
		</Run>

		<Run Exe="$(CygPathExe)" Args="-w $(_GitRoot)" WorkingDir="$(MSBuildProjectDirectory)" Condition="'$(CygPathExe)' != ''">
			<Output TaskParameter="Output" PropertyName="_GitRoot" />
		</Run>

		<PropertyGroup>
			<GitRoot>$([System.IO.Path]::GetFullPath($(_GitRoot)))</GitRoot>
		</PropertyGroup>

		<ItemGroup>
			<_HeadInput Include="$(GitRoot)\.git\HEAD;$(GitRoot)\.git\refs\heads\*.*" />
		</ItemGroup>

		<Message Text="Determined Git repository root as '$(GitRoot)'" Importance="normal" />

	</Target>

	<Import Project="SemanticGit.tasks" />

</Project>
