<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2014 Daniel Cazzulino

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<Project ToolsVersion="4.0"
		 InitialTargets="CheckPrerequisites"
         DefaultTargets="Build"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<Import Project="build.props" Condition="Exists('build.props')" />

	<PropertyGroup>
		<Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
		<TrackFileAccess>false</TrackFileAccess>
		<SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)</SolutionDir>
		<SolutionDir Condition="!HasTrailingSlash('$(SolutionDir)')">$(SolutionDir)\</SolutionDir>
		<NuGetExePath Condition="'$(NuGetExePath)' == ''">$(SolutionDir).nuget\nuget.exe</NuGetExePath>
	</PropertyGroup>

	<ItemGroup>
		<!-- Solutions at the root directory are all built automatically unless overriden -->
		<SolutionFile Include="*.sln" Condition="'@(SolutionFile)' == ''" />

		<!-- NuSpec definitions alongside a .csproj cause us to call NuGet Pack on the project instead -->
		<_PackageProject Include="**\*.csproj">
			<!-- We must do this metadata annotation here. Inside a target, it doesn't work :( -->
			<NuSpec>%(RecursiveDir)%(Filename).nuspec</NuSpec>
		</_PackageProject>
	</ItemGroup>

	<ItemGroup Condition=" '$(PackageSources)' == '' ">
		<PackageSource Include="https://nuget.org/api/v2/" />

		<!-- Additional package sources to restore from -->
		<!--
		<PackageSource Include="http://www.myget.org/F/b4ff5f68eccf4f6bbfed74f055f88d8f/" />
		-->
	</ItemGroup>

	<PropertyGroup>
		<BuildDependsOn>
			BeforeBuild;
			BuildSources;
			PackageRestore;
			CoreBuild;
			AfterBuild;
		</BuildDependsOn>
	</PropertyGroup>

	<Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />
	<Target Name="BeforeBuild" />
	<Target Name="AfterBuild" />

	<Target Name="CoreBuild" DependsOnTargets="CoreBuildNoVersion;CoreBuildVersion" />

	<Target Name="CoreBuildNoVersion" Condition="'$(Version)' == ''">

		<MSBuild
			Projects="@(SolutionFile)"
			Targets="Build"
			Properties="Configuration=$(Configuration);TrackFileAccess=$(TrackFileAccess)"/>

		<Exec Command='"$(NuGetExePath)" Pack "@(PackageProject)" -NoPackageAnalysis -NonInteractive'
			  Condition="'%(Identity)' != ''" />
		<Exec Command='"$(NuGetExePath)" Pack "@(PackageSpec)" -NoPackageAnalysis -NonInteractive'
			  Condition="'%(Identity)' != ''" />

	</Target>

	<Target Name="CoreBuildVersion" Condition="'$(Version)' != ''">

		<MSBuild
			Projects="@(SolutionFile)"
			Targets="Build"
			Properties="Configuration=$(Configuration);TrackFileAccess=$(TrackFileAccess);Version=$(Version)"/>

		<Exec Command='"$(NuGetExePath)" Pack "@(PackageProject)" -NoPackageAnalysis -NonInteractive -Version $(Version)'
			  Condition="'%(Identity)' != ''" />
		<Exec Command='"$(NuGetExePath)" Pack "@(PackageSpec)" -NoPackageAnalysis -NonInteractive -Version $(Version)'
			  Condition="'%(Identity)' != ''" />

	</Target>

	<!-- Redefined from NuGet.targets since we build differently -->
	<Target Name="BuildPackage" 
			Inputs="@(NuSpec)" 
			Outputs="%(Identity)-BATCH" 
			DependsOnTargets="RestorePackages;SemanticGit:GetVersion">
		<PropertyGroup>
			<ReleaseNotesPath>%(NuSpec.RootDir)%(NuSpec.Directory)ReleaseNotes.txt</ReleaseNotesPath>
			<ReleaseNotes Condition="Exists('$(ReleaseNotesPath)')">$([System.IO.File]::ReadAllText('$(ReleaseNotesPath)'))</ReleaseNotes>
		</PropertyGroup>

		<Message Text="Updating %(NuSpec.Filename)%(NuSpec.Extension) release notes from existing file"
				 Condition="'$(ReleaseNotes)' != ''"
				 Importance="normal" />

		<XmlPoke XmlInputPath="@(NuSpec)" 
				 Query="/package/metadata/releaseNotes" 
				 Value="$(ReleaseNotes)"
				 Condition="'$(ReleaseNotes)' != ''" />

		<Exec Command="&quot;$(NuGetCommand)&quot; pack -NoPackageAnalysis &quot;%(NuSpec.FullPath)&quot; -Version &quot;$(_Major).$(_Minor).$(_Patch)$(_PreRelease)&quot;"
              ContinueOnError="false" />

	</Target>

	<Target Name="PackageRestore">
		<Message Text="Restoring NuGet packages..." Importance="normal" />
		
		<Exec Command='"$(NuGetExePath)" restore "%(SolutionFile.Identity)" -NonInteractive -Source @(PackageSource) -Verbosity quiet' />

		<!-- 
		Add GitHubLink OOB?
		<Exec Command="&quot;$(NuGetExePath)&quot; install githublink -Pre -Source http://www.myget.org/F/b4ff5f68eccf4f6bbfed74f055f88d8f/ -SolutionDir &quot;$(SolutionDir)&quot; -Verbosity quiet -ExcludeVersion" Condition="!Exists('$(SolutionDir)\packages\githublink\')" />
		-->
	</Target>

	<Target Name="BuildSources">
		<!-- The conditionals on the item metadata don't work outside a target -->
		<ItemGroup>
			<!-- We only keep those that do have a nuspec at the .csproj level -->
			<PackageProject Include="@(_PackageProject)" Condition="Exists('%(NuSpec)')" />
			<!-- Grab the rest of the spec files. -->
			<PackageSpec Include="**\*.nuspec" Exclude="@(PackageProject -> '%(NuSpec)')" />
		</ItemGroup>
	</Target>

	<Target Name="CheckPrerequisites">
		<Error Text=".nuget\NuGet.exe does not exist. Run build.ps1 at least once."
			   Condition="!Exists('.nuget\NuGet.exe')" />
	</Target>

	<Import Project="build.targets" Condition="Exists('build.targets')" />

</Project>