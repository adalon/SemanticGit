<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2014 Daniel Cazzulino

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<Project ToolsVersion="4.0"
         DefaultTargets="Build"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<Import Project="nuget\SemanticGit\build\SemanticGit.props" />

	<PropertyGroup>
		<BuildRoot>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), .gitignore))</BuildRoot>
		<BuildRoot Condition="!HasTrailingSlash('$(BuildRoot)')">$(BuildRoot)\</BuildRoot>
		<TrackFileAccess>false</TrackFileAccess>
		<SolutionDir>$(BuildRoot)src\</SolutionDir>
		<BuildPackage>true</BuildPackage>
		<DownloadNuGetExe>true</DownloadNuGetExe>
		<TargetDir>$(BuildRoot)</TargetDir>
		<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
	</PropertyGroup>

	<Import Project="src\.nuget\NuGet.targets" />
	<Import Project="nuget\SemanticGit\build\SemanticGit.targets" />

	<PropertyGroup>
		<BuildDependsOn>
			UpdateChangelog;
			$(BuildDependsOn)
		</BuildDependsOn>
	</PropertyGroup>
	
	<!--
    =============================================================
              Changelog Generation
	
	We need to first transform the T4 templates to get the latest
	version of the targets, and then we need to invoke ourselves 
	again, import the projects and generate the changelog. We 
	do this by conditionally importing and invoking ourselves 
	via MSBuild using project inheritance.
	=============================================================
	-->
	<Import Project="nuget\SemanticGit.Changelog\build\SemanticGit.Changelog.props" Condition="'$(_ChangeLog)' == 'true'" />
	<PropertyGroup>
		<GitHubUrl>https://github.com/kzu/SemanticGit</GitHubUrl>
	</PropertyGroup>
	<Import Project="nuget\SemanticGit.Changelog\build\SemanticGit.Changelog.targets" Condition="'$(_ChangeLog)' == 'true'" />

	<Target Name="UpdateChangelog">
		<!-- First we need to transform the tasks -->
		<ItemGroup>
			<_TextTransform Include="nuget\SemanticGit.tt">
				<OutputFile>nuget\SemanticGit\build\SemanticGit.tasks</OutputFile>
			</_TextTransform>
			<_TextTransform Include="nuget\SemanticGit.Changelog.tt">
				<OutputFile>nuget\SemanticGit.Changelog\build\SemanticGit.Changelog.tasks</OutputFile>
		</_TextTransform>
		</ItemGroup>

		<Exec Command="&quot;$(_TransformExe)&quot; -out &quot;$(MSBuildProjectDirectory)\%(_TextTransform.OutputFile)&quot; &quot;$(MSBuildProjectDirectory)\%(_TextTransform.Identity)&quot;" ContinueOnError="false" />

		<!-- Then we run ourselves but with the changelog imports -->
		<MSBuild Projects="$(MSBuildThisFileFullPath)" Targets="SemanticGit:GenerateChangeLog" Properties="_ChangeLog=true" />
	</Target>

	<ItemGroup>
		<NuSpec Include="**\*.nuspec" />
		<PackageConfig Include="**\packages.config" />
	</ItemGroup>
	
    <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />

	<!-- Redefined from NuGet.targets since we build differently -->
	<Target Name="BuildPackage" 
			Inputs="@(NuSpec)" 
			Outputs="%(Identity)-BATCH" 
			DependsOnTargets="CheckPrerequisites;RestorePackages;SemanticGit:GetVersion">
		<PropertyGroup>
			<ReleaseNotesPath>%(NuSpec.RootDir)%(NuSpec.Directory)ReleaseNotes.txt</ReleaseNotesPath>
			<ReleaseNotes Condition="Exists('$(ReleaseNotesPath)')">$([System.IO.File]::ReadAllText('$(ReleaseNotesPath)'))</ReleaseNotes>
		</PropertyGroup>

		<Message Text="Updating %(NuSpec.Filename)%(NuSpec.Extension) release notes from existing file"
				 Condition="'$(ReleaseNotes)' != ''"
				 Importance="normal" />

		<XmlPoke XmlInputPath="@(NuSpec)" 
				 Query="/package/metadata/releaseNotes" 
				 Value="$(ReleaseNotes)"
				 Condition="'$(ReleaseNotes)' != ''" />

		<Exec Command="&quot;$(NuGetCommand)&quot; pack -NoPackageAnalysis &quot;%(NuSpec.FullPath)&quot; -Version &quot;$(_Major).$(_Minor).$(_Patch)$(_PreRelease)&quot;"
              ContinueOnError="false" />

	</Target>

	<!-- Redefined from NuGet.targets since we can restore any number of package config files. -->
	<Target Name="RestorePackages" Condition="'@(PackageConfig)' != ''">
		<Message Text="Restoring NuGet packages..." Importance="normal" />
		<Exec Command="$(NuGetCommand) restore %(PackageConfig.FullPath) -NonInteractive -SolutionDir $(PaddedSolutionDir) -Verbosity quiet" />
	</Target>

	<PropertyGroup>
		<_CommonProgramFiles>$(CommonProgramFiles(x86))</_CommonProgramFiles>
		<_CommonProgramFiles Condition=" '$(_CommonProgramFiles)' == '' ">$(CommonProgramFiles)</_CommonProgramFiles>
		<TextTransformPath Condition="'$(TextTransformPath)' == ''">$(_CommonProgramFiles)\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\TextTransform.exe</TextTransformPath>
		<!-- Initial default value -->
		<_TransformExe>$(TextTransformPath)</_TransformExe>
		<!-- Cascading probing if file not found -->
		<_TransformExe Condition="!Exists('$(_TransformExe)')">$(_CommonProgramFiles)\Microsoft Shared\TextTemplating\10.0\TextTransform.exe"</_TransformExe>
		<_TransformExe Condition="!Exists('$(_TransformExe)')">$(_CommonProgramFiles)\Microsoft Shared\TextTemplating\11.0\TextTransform.exe"</_TransformExe>
		<_TransformExe Condition="!Exists('$(_TransformExe)')">$(_CommonProgramFiles)\Microsoft Shared\TextTemplating\12.0\TextTransform.exe"</_TransformExe>
		<!-- Future proof 'til VS2013+2 -->
		<_TransformExe Condition="!Exists('$(_TransformExe)')">$(_CommonProgramFiles)\Microsoft Shared\TextTemplating\13.0\TextTransform.exe"</_TransformExe>
		<_TransformExe Condition="!Exists('$(_TransformExe)')">$(_CommonProgramFiles)\Microsoft Shared\TextTemplating\14.0\TextTransform.exe"</_TransformExe>
	</PropertyGroup>

</Project>